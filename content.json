{"meta":{"title":"元素力量","subtitle":"铁钴镍铜锌","description":null,"author":"铜镭","url":"http://tonglei.win"},"pages":[{"title":"","date":"2017-01-07T01:13:51.956Z","updated":"2017-01-07T01:13:51.956Z","comments":true,"path":"404.html","permalink":"http://tonglei.win/404.html","excerpt":"","text":""},{"title":"好多网站","date":"2017-01-07T01:13:51.956Z","updated":"2017-01-07T01:13:51.956Z","comments":false,"path":"favsites/index.html","permalink":"http://tonglei.win/favsites/index.html","excerpt":"","text":"代码示例 Maven + Tomcat 8 embed 标准规范一卡通 全国一卡通互联互通 全国一卡通互联互通-规范下载 SSO [OAuth 2.0]https://oauth.net/2/ IT技术 小程序联盟 资源工具 配色网 Top Open-Source Static Site Generators"},{"title":"好多标签","date":"2017-01-07T01:13:51.972Z","updated":"2017-01-07T01:13:51.972Z","comments":false,"path":"tags/index.html","permalink":"http://tonglei.win/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"NodeJs基本知识","slug":"IT学习/Javascript/NodeJs基本知识","date":"2017-01-07T01:13:51.956Z","updated":"2017-01-07T01:13:51.956Z","comments":true,"path":"2017/01/07/IT学习/Javascript/NodeJs基本知识/","link":"","permalink":"http://tonglei.win/2017/01/07/IT学习/Javascript/NodeJs基本知识/","excerpt":"","text":"什么是 NodeJS ?Node.js 是运行在服务端的 JavaScript。 NodeJs 的安装https://nodejs.org/en/download/ Hello world创建 app.js通过 required 引入模块1var http = require(\"http\"); 创建服务器12345678910111213http.createServer(function (request, response) &#123; // 发送 HTTP 头部 // HTTP 状态值: 200 : OK // 内容类型: text/plain response.writeHead(200, &#123;'Content-Type': 'text/plain'&#125;); // 发送响应数据 \"Hello World\" response.end('Hello World\\n');&#125;).listen(4000);// 终端打印如下信息console.log('Server running at http://127.0.0.1:4000/'); 如此便创建了http服务器，使用node命令运行：1$ node app.js 访问 http://localhost:4000，可以在浏览器里看到熟悉的Hello World。 关于npm什么是npmnpm是nodejs的包管理工具，类似java的maven，最新的nodejs安装包里已经包含了npm，不需要再单独安装。 npm常用命令官网手册 https://docs.npmjs.com/ 查看本地npm版本1$ npm -v npm指令列表 指令 说明 npm install 安装模块 npm uninstall 卸载模块 npm update 更新模块 npm outdated 检查模块是否已经过时 npm ls 查看安装的模块 npm init 在项目中引导创建一个package.json文件 npm help 查看某条命令的详细帮助 npm root 查看包的安装路径 npm config 管理npm的配置路径 npm cache 管理模块的缓存 npm start 启动模块 npm stop 停止模块 npm restart 重新启动模块 npm test 测试模块 npm version 查看模块版本 npm view 查看模块的注册信息 npm publish 发布模块 npm access 在发布的包上设置访问级别 npm package.json的语法官网介绍 https://docs.npmjs.com/files/package.json网友翻译 http://mujiang.info/translation/npmjs/files/package.json.html 对于普通人没必要记得太多，只需要在工程目录执行1$ node init 然后根据提示填好各部分信息即可 nodejs REPLREPL = Read Eval Print Loop = 交互解释器类似于 php cli，可以在终端执行nodejs表达式。 nodejs REPL 示例1234567891011121314$ node&gt; 1 + 12&gt; var x = 1, y = 2undefined&gt; x + y3&gt; console.log(&quot;x + y = &quot; + (x + y))x + y = 3undefined&gt; console.log(&quot;http://tonglei.win&quot;)http://tonglei.winundefined&gt; REPL 指令 指令 说明 ctrl + c 撤销当前指令 ctrl + c 两次 退出 Node REPL ctrl + d 退出 Node REPL ↑/↓ 查看输入的历史命令 tab 键 列出当前命令 .help 列出使用命令 .break 退出多行表达式 .clear 退出多行表达式 .save filename 保存当前的 Node REPL 会话到指定文件 .load filename 载入当前 Node REPL 会话的文件内容 node基本用法回调函数Node.js 异步编程的直接体现就是回调。异步编程依托于回调来实现，但不能说使用了回调后程序就异步化了。回调函数在完成任务后就会被调用，Node 使用了大量的回调函数，Node 所有 API 都支持回调函数。例如，我们可以一边读取文件，一边执行其他命令，在文件读取完成后，我们将文件内容作为回调函数的参数返回。这样在执行代码时就没有阻塞或等待文件 I/O 操作。这就大大提高了 Node.js 的性能，可以处理大量的并发请求。 阻塞方式读取文件123var fs = require(\"fs\");var data = fs.readFileSync('filename.txt');console.log(data.toString()); 非阻塞方式读取文件123var fs = require(\"fs\");var data = fs.readFile('filename.txt');console.log(data.toString()); 事件循环Node.js 是单进程单线程应用程序，但是通过事件和回调支持并发，所以性能非常高。Node.js 的每一个 API 都是异步的，并作为一个独立线程运行，使用异步函数调用，并处理并发。Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数。 基本用法12345678910// 引入 events 模块var events = require('events');// 创建 eventEmitter 对象var eventEmitter = new events.EventEmitter();// 绑定事件及事件的处理程序eventEmitter.on('eventName', eventHandler);// 触发事件eventEmitter.emit('eventName'); 完整示例12345678910111213141516171819202122// 引入 events 模块var events = require(&apos;events&apos;);// 创建 eventEmitter 对象var eventEmitter = new events.EventEmitter();// 创建事件处理程序var connectHandler = function connected() &#123; console.log(&apos;连接成功。&apos;); // 触发 data_received 事件 eventEmitter.emit(&apos;data_received&apos;);&#125;// 绑定 connection 事件处理程序eventEmitter.on(&apos;connection&apos;, connectHandler); // 使用匿名函数绑定 data_received 事件eventEmitter.on(&apos;data_received&apos;, function()&#123; console.log(&apos;数据接收成功。&apos;);&#125;);// 触发 connection 事件 eventEmitter.emit(&apos;connection&apos;); 模块系统为了让Node.js的文件可以相互调用，Node.js提供了一个简单的模块系统。模块是Node.js 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 Node.js 文件就是一个模块，这个文件可能是JavaScript 代码、JSON 或者编译过的C/C++ 扩展。 创建自定义模块1234567891011// hello.js function Hello() &#123; var name; this.setName = function(newName) &#123; name = newName; &#125;; this.sayHello = function() &#123; console.log('Hello ' + name); &#125;; &#125;; module.exports = Hello; 1234// app.jsvar hello = require('./hello');hello.setName(\"tonglei.win\");hello.sayHello(); 模块查找顺序nodejs包含了一些内置模块，如前文用到的 http、fs等等，其模块加载顺序为 文件缓存模块 &gt; 原生模块 &gt; 文件模块 此篇完 http://tonglei.win","categories":[{"name":"IT学习","slug":"IT学习","permalink":"http://tonglei.win/categories/IT学习/"},{"name":"Javascript","slug":"IT学习/Javascript","permalink":"http://tonglei.win/categories/IT学习/Javascript/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://tonglei.win/tags/nodejs/"},{"name":"javascript","slug":"javascript","permalink":"http://tonglei.win/tags/javascript/"}],"keywords":[{"name":"IT学习","slug":"IT学习","permalink":"http://tonglei.win/categories/IT学习/"},{"name":"Javascript","slug":"IT学习/Javascript","permalink":"http://tonglei.win/categories/IT学习/Javascript/"}]},{"title":"node-in-action_笔记","slug":"IT学习/Javascript/node-in-action-笔记","date":"2017-01-03T09:07:49.000Z","updated":"2017-01-09T08:40:33.253Z","comments":true,"path":"2017/01/03/IT学习/Javascript/node-in-action-笔记/","link":"","permalink":"http://tonglei.win/2017/01/03/IT学习/Javascript/node-in-action-笔记/","excerpt":"","text":"第一部分 简介第一章 基本概念关键词: node.js express 第一章主要回答了以下几个问题。 什么是Node.js:依赖于 Google V8 引擎，使 javascript 脱离浏览器，运行在服务端。 Node.js的优势: V8 引擎很快，尤其是面对异步和多线程； JS 流行已久，资源丰富； 客户端与服务端可共享代码。 为什么用Node.js不是拍脑袋，不是为了性能，是为了全栈开发。 什么是Express:Express 就像 JQuery，封装了原生API，并易于扩展。 Express 的意义: 为Node.js增加了不少使用的工具方法； 将请求重构分解，使其模块化，更易维护。 Express 的哲学 作为一个框架，express的形式并不严格，它适合各类应用，比如视频聊天、博客甚至API服务。 很少有应用可以仅仅依赖 express，你仍然需要大量的第三方软件包。 最简化是把双刃剑，它增加了寻找合适第三方的难度。 Express 的四个核心特性 中间件：把请求到响应的过程分解为一个个小模块； 路由：将请求地址和方法与中间件的函数对应起来； 子应用：大工程的组成单元，是小型的应用实体； 简化：就是简化了原生Node.js语法。 Express 适合谁？ 适合Web应用 适合全栈开发人员 适合单页应用SPAs SEAN / MEAN / MEN 第二章 nodejs关键词: nodejs 第二章主要介绍的都是nodejs 的基本用法，例如 HelloWorld，使用模块等。 第三章 expressjs关键词: express 第三章从express的四个特点方面给出了入门示例。 中间件示例，增加认证能力 12345678910111213141516app.use(function(request, response, next) &#123; console.log(\"In comes a \" + request.method + \" to \" + request.url); next();&#125;);app.use(function(request, response, next) &#123; var minute = (new Date()).getMinutes(); if ((minute % 2) === 0) &#123; next(); &#125; else &#123; response.statusCode = 403; response.end(\"Not authorized.\"); &#125;&#125;);app.use(function(request, response) &#123; response.end('Secret info: the password is \"swordfish\"!');&#125;); 路由示例 1234567891011121314151617181920212223242526272829303132var express = require(\"express\");var path = require(\"path\");var http = require(\"http\");var app = express();var publicPath = path.resolve(__dirname, \"public\");app.use(express.static(publicPath));app.get(\"/\", function(request, response) &#123; response.end(\"Welcome to my homepage!\");&#125;);app.get(\"/about\", function(request, response) &#123; response.end(\"Welcome to the about page!\");&#125;);app.get(\"/weather\", function(request, response) &#123; response.end(\"The current weather is NICE.\");&#125;);app.get(\"/hello/:who\", function(request, response) &#123; response.end(\"Hello, \" + request.params.who + \".\"); // Fun fact: this has some security issues, which we’ll get to!&#125;);app.use(function(request, response) &#123; response.statusCode = 404; response.end(\"404!\");&#125;);http.createServer(app).listen(3000); 扩展原生 Request 和 Response 123456789101112131415161718var express = require(\"express\");var app = express();var EVIL_IP = \"192.168.1.1\";var REDIRECT_IP = \"192.168.1.2\";var SEND_FILE_IP = \"192.168.1.3\";app.use(function(request, response, next) &#123; if (request.ip === EVIL_IP) &#123; response.status(401).send(\"Not allowed!\"); &#125; else if (request.ip === REDIRECT_IP) &#123; response.redirect(\"http://tonglei.win\"); &#125; else if (request.ip === SEND_FILE_IP) &#123; response.sendFile(\"/path/to/cool_song.mp3\"); &#125; else &#123; next(); &#125;&#125;);// ... the rest of your app ... 视图index.js 1234567891011var express = require(\"express\");var path = require(\"path\");var app = express();app.set(\"views\", path.resolve(__dirname, \"views\"));app.set(\"view engine\", \"ejs\");app.get(\"/\", function(request, response) &#123; response.render(\"index\", &#123; message: \"Hey everyone! This is my webpage.\" &#125;);&#125;); views/index.ejs12345678910&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;Hello, world!&lt;/title&gt; &lt;/head&gt;&lt;body&gt; &lt;%= message %&gt;&lt;/body&gt;&lt;/html&gt; 第二部分 核心第四章 中间件关键词: middleware, log, thrid part Express 包含一个中间件的堆栈，除非中间返回或者出错，不然它会从头执行到底。 中间件是对 Request 的处理函数，它至少有2个参数: request 和 response，通常还有一个指向下一个中间件处理的方法。 网络上有各种成熟的第三方中间件。 从这里可以找到很多网友提供的中间件http://expressjs.com/resources/middleware.html 一个完整的例子 123456789101112131415161718192021222324252627282930313233var express = require(\"express\");var path = require(\"path\");var app = express();// 本例始终返回一个文件var filePath = path.join(__dirname, \"celine.jpg\");// 如果发送文件失败，进入异常处理。app.use(function(req, res, next) &#123; res.sendFile(filePath, function(err) &#123; if (err) &#123; next(new Error(\"Error sending file!\")); &#125; &#125;);&#125;);// 打印错误日志app.use(function(err, req, res, next) &#123; console.error(err); next(err);&#125;);// 返回错误页app.use(function(err, req, res, next) &#123; res.status(500); res.send(\"Internal server error.\");&#125;);// 启动 Http 监听app.listen(3000, function() &#123; console.log(\"App started on port 3000\");&#125;); 第五章 路由关键词 routing 简单的路由参数 123app.get(\"/users/:userid\", function(req, res) &#123; var userId = parseInt(req.params.userid, 10);&#125;); 正则表达式的路由参数 1234app.get(/^\\/users\\/(\\d+)-(\\d+)$/, function(req, res) &#123; var startId = parseInt(req.params[0], 10); var endId = parseInt(req.params[1], 10);&#125;); 使用 Https 生成证书 12openssl genrsa -out privatekey.pem 1024openssl req -new -key privatekey.pem -out request.pem Express 中使用证书 1234567891011121314151617var express = require(\"express\");var http = require(\"http\");var https = require(\"https\");var fs = require(\"fs\");var app = express();// ... define your app ...var httpsOptions = &#123; key: fs.readFileSync(\"path/to/private/key.pem\"), cert: fs.readFileSync(\"path/to/certificate.pem\")&#125;;app.use(function(req, res) &#123; res.status(404).render(\"404\");&#125;);http.createServer(app).listen(80);https.createServer(httpsOptions, app).listen(443); 第六章 构建 APIs关键词: API, 主机间交互 一个简单的API样式 请求方式：/timezone?tz=America+Los_Angeles 反馈结果：{ “time”: “2015-06-09T16:20:00+01:00”, “zone”: “America/Los_Angeles” } 一个更完整的Express Api示例 需求： API的调用需要传入一个最小值和一个最大值； API返回一个随机数。 实现步骤： 创建package.json; 创建 app.js，作为程序入口; 在 app.js 中实现express路由，并返回随机数。 代码： package.json 1234567891011&#123; \"name\": \"2-api-random\", \"version\": \"1.0.0\", \"description\": \"Express实例2 构建简单的API\", \"main\": \"app.js\", \"scripts\": &#123; \"test\": \"node app.js\" &#125;, \"author\": \"Booker\", \"license\": \"ISC\"&#125; app.js 123456789101112131415161718192021222324var express = require(\"express\");var app = express();app.get('/random/:min/:max', function(req, res)&#123; // 获取参数 var min = parseInt(req.params.min); var max = parseInt(req.params.max); // 错误处理 if(isNaN(min) || isNaN(max)) &#123; res.status(400); res.json(&#123;error: \"Bad request.\"&#125;); return; &#125; var result = Math.round((Math.random() * (max - min)) + min); res.json(&#123;result: result&#125;);&#125;);app.listen(3000, function() &#123; console.log('App started on port 3000');&#125;); 启动和测试控制台输入 1npm test 浏览器访问：http://localhost:3000/random/10/100可以看到浏览器上的输出：{“result”:61} 对异常的处理 设置http状态为400； 返回描述错误的 json 对象； 执行 return，如果没有此步，程序还会继续进行，还会产生其他错误。 比如访问：http://localhost:3000/random/10/aaa浏览器上输出：{“error”:”Bad request.”} CRUD - 增 查 改 删 - POST GET PUT DELETE 1234app.post(\"/\", function() &#123; console.log(\"CREATE\") &#125;);app.get(\"/\", function() &#123; console.log(\"READ\") &#125;);app.put(\"/\", function() &#123; console.log(\"UPDATE\") &#125;);app.delete(\"/\", function() &#123; console.log(\"DELETE\") &#125;); 构建多版本API示例 app1.js12345678var express = require(\"express\");var api = express.Router();api.get(\"/timezone\", function(req, res) &#123; res.send(\"Sample response for /timezone\");&#125;);module.exports = api; app2.js12345678var express = require(\"express\");var api = express.Router();api.get(\"/timezone\", function(req, res) &#123; res.send(\"API 2: super cool new response for /timezone\");&#125;);module.exports = api; app.js123456789101112var express = require(\"express\");var apiVersion1 = require(\"./api1.js\");var apiVersion2 = require(\"./api2.js\");var app = express();app.use(\"/v1\", apiVersion1);app.use(\"/v2\", apiVersion2);app.listen(3000, function() &#123; console.log(\"App started on port 3000\");&#125;); 测试：http://localhost:3000/v1/timezone输出：Sample response for /timezone http://localhost:3000/v2/timezone输出：API 2: super cool new response for /timezone Http 状态码简述 码段 描述 中文 1xx hold on 请求已接收，请求者还要继续发送 2xx here you go 成功 3xx go away 重定向 4xx you messed up 客户端错误 5xx I messed up 服务器错误 第七章 Views and templates, Pug and Ejs关键词: jade, pug, ejs 视图引擎用来渲染界面的模块，Pug和Ejs都是视图引擎 简单的利用视图引擎渲染的示例 12345678910111213var express = require(\"express\");var path = require(\"path\");var app = express();app.set(\"view engine\", ejs);app.set(\"views\", path.resolve(__dirname, \"views\"));app.get(\"/\", function(req, res) &#123; res.render(\"index\");&#125;);app.listen(3000); 这样当你访问 http://localhost:3000/ 时候，Nodejs 会寻找 views 目录下的 index.ejs 文件进行渲染，并将结果发送给浏览器。 从pug到htmlpug的源文件``jsdoctype htmlhtml(lang=”en”)head title Hello world!body h1 This is a pug example #containerp Wow 渲染后的结果js&lt;!DOCTYPE html&gt; Hello world! This is a pug example &lt;p&gt;Wow.&lt;/p&gt; ``关于 Pug 本身的内容，以后再详细介绍。简单说来，pug就是利用缩进来区分区块的层级，用每行的地一个单词表示区块的标签，用空格引出区块的文本内容，用括号指定其属性。 第三部分MongoDB关键词: MongoDB, bcrypt, 认证 MongoDB 怎么样？ 特别适合Node开发者 NoSQL数据库与JS对象的结构更相近 Mongo的原生shell使用的是Javascript Application 1-&gt;1 Database 1-&gt;N Collection 1-&gt;N Document 从SQL到NoSQL(MongoDB) MongoDB 的 Documents 相当于 SQL 的结果集，比如应用中的用户，每个用户就是个Document或者是SQL中的一行数据，MongoDB并不限制Schema MongoDB 的 Collections 相当于 SQL 中的 tables。Collections 包含多个 Documents。此外，Documents 可以绑定其他 Documents MongoDB 的 Databases 相当与 SQL 的 Databases 构建一个简单的工程 首页，所有用户可见，可以查看用户信息 用户信息页显示用户昵称或用户名，注册日期，用户登录后可以编辑自己的信息 新用户注册页","categories":[{"name":"IT学习","slug":"IT学习","permalink":"http://tonglei.win/categories/IT学习/"},{"name":"Javascript","slug":"IT学习/Javascript","permalink":"http://tonglei.win/categories/IT学习/Javascript/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://tonglei.win/tags/nodejs/"},{"name":"javascript","slug":"javascript","permalink":"http://tonglei.win/tags/javascript/"},{"name":"express","slug":"express","permalink":"http://tonglei.win/tags/express/"}],"keywords":[{"name":"IT学习","slug":"IT学习","permalink":"http://tonglei.win/categories/IT学习/"},{"name":"Javascript","slug":"IT学习/Javascript","permalink":"http://tonglei.win/categories/IT学习/Javascript/"}]},{"title":"史上最全最强资源网站整理","slug":"日常记录/史上最全最强资源网站整理","date":"2016-12-28T03:56:33.000Z","updated":"2017-01-09T07:13:45.603Z","comments":true,"path":"2016/12/28/日常记录/史上最全最强资源网站整理/","link":"","permalink":"http://tonglei.win/2016/12/28/日常记录/史上最全最强资源网站整理/","excerpt":"","text":"一、找资源利器西林街：http://www.xilinjie.com/胖次：http://www.panc.cc/EV搜索：http://www.evsou.com/找文件：http://www.zhaofile.com/呆木瓜：http://www.daimugua.com/爱挖盘：http://www.iwapan.com/ 二、外文书籍下载网站Library Genesis：http://gen.lib.rus.ec/Book ZZ：http://bookzz.org/Free-Ebooks：http://www.free-ebooks.net/Bookboon：http://bookboon.com/enManyBooks：http://manybooks.net/SnipFiles：http://www.snipfiles.com/Open Library：https://openlibrary.org/Bookyards：http://www.bookyards.com/ 三、中文书籍下载网站书林网：http://www.booksforest.com/钱氏藏书：http://qscs.haotui.com/?fromuid=272大熊图书馆：http://dxlibrary.haotui.com/bbs.php大众图书馆：http://dztsg.info/forum.php读远：http://www.readfar.com/Bucee杂志馆：http://bucee.net/汉川草庐：http://www.sidneyluo.net/index.html 四、非常强大的翻译平台CNKI翻译助手：http://dict.cnki.net/句酷：http://www.jukuu.com/词都：http://www.dictall.com/LINE Dictionary：http://ce.linedict.com/dict.html#/cnen/Glosbe：https://glosbe.com/ 五、所谓的神站系列大软坊：http://app.hustonline.net/major香当网：http://www.xiangdang.net/Smallpdf：http://smallpdf.com/MSDN：http://www.itellyou.cn/ 六、考研资料相关网站考研圈：http://www.zhuansoo.com/vbar/c/vc.html?id=19考试点社区:http://bbs.kaoshidian.com/resource考研论坛：http://download.bbs.kaoyan.com/小木虫论坛：http://emuch.net/bbs/index.php考研网：http://download.kaoyan.com/传媒人网：http://www.chuanmeiren.cn/bbs/ 七、动漫资源网站Animation World Network：http://www.awn.com/卡通酿造：http://www.cartoonbrew.com/皮克斯帝国：http://pixarempire.com/动漫花园：http://share.dmhy.org漫游BT：http://share.popgo.org简单动漫：http://www.36dm.com/漫画书：http://manhuashu.net/旋风动漫：http://bt.xfsub.com/ 八、高清电影资源网站高清控联盟：http://www.gaoqingkong.com/藏云阁高清网：http://www.cangyunge.com/中国高清网：http://gaoqing.la/小无相：http://movtop.cn/优质电影网：http://www.youzhidy.com/蓝光电影网：http://www.hd1080.cn/电影王国：http://www.moviewg.com/蓝影网：http://www.lanyingwang.com/[22个电影资源网站：http://weibo.com/p/1001603822968198317617?mod=zwenzhang] 九、六个纪录片精品网站Ary Heaven：http://documentaryheaven.com/Free DocumentAries：http://freedocumentaries.org/Top DocumentaryFilm：http://topdocumentaryfilms.com/District 7 Media:http://www.district7media.net/main/Citizen 4Film:https://citizenfourfilm.com/Documentary：http://documentaryaddict.com/ 十、下载国内外杂志的资源网站高清杂志网：http://www.gqzzw.com/PDF magazines：http://pdfmagazines.org/PDF-giant：http://pdf-giant.com/PDF之家：http://www.pdfzj.com/十月杂志网：http://shiyue.me/ 十一、有声读物网站天方听书 http://www.tingbook.com/静雅思听 http://www.justing.com.cn/博客思听http://www.bookast.com/Bookast/畅想听吧 http://t.cn/h4n3Fi；书喇叭 http://shulaba.com/爱听网 http://www.aitingwang.com/酷听网 http://www.kting.cn/家常读书 http://www.jiachangdushu.com/portal.php 十二、旧书交易类网站孔夫子旧书网 http://shop.kongfz.com/布衣书局http://www.booyee.com.cn/index.jsp有路网 http://www.youlu.net/中国旧书网 http://www.jiushu.cn/天下旧书网 http://www.jiushu.net/ 十三、免费音效资源类网站闪吧音效库 http://www.flash8.net/download.shtml中国素材网音效库 http://www.sucai.com/duomeiti/yx/日本的音效库 http://koukaongen.com/站长素材-音效 http://sc.chinaz.com/yinxiao/Soundsnap http://www.soundsnap.com/Freeplay Music http://www.freeplaymusic.com/Ilovewavs http://www.ilovewavs.com/Breakout http://www.breakout4u.com/en/ 十四、影视后期教程类网站火星教育http://t.cn/zOSDxUa我要自学网http://t.cn/hgWA5w翼虎网http://t.cn/RhcgNMN飞特网http://t.cn/hbBHpZ直线网http://t.cn/8sA9xv2Videocopilot http://www.videocopilot.net/Vfxinfo http://vfxinfo.net/BW Design http://benwattsdesign.com/ 十五、免费视频素材/模板下载网站视崛http://www.shij001.com/92素材网http://www.92sucai.com/新GG儿http://www.newcger.com/千图网 http://www.58pic.com/shipin/39视频http://www.39video.com/模板天空http://www.mobantiankong.com/人人素材社区http://www.rr-sc.com/?fromuid=201838 十六、Photoshop教程网站我要自学网 http://www.51zxw.net/52photoshop http://www.52photoshop.cn/PSDFAN http://psd.fanextra.com/Photoshop Tutorials http://www.photoshoptutorials.ws/PS Brushes http://www.psbrushes.net/ps联盟 http://www.68ps.com/ 十七、专业影评类网站时光网 http://www.mtime.com/community/豆瓣电影http://movie.douban.com/烂番茄 http://www.rottentomatoes.com/IMBD http://www.imdb.com/美国广播影评人协会http://www.criticschoice.com/纽约影评家协会http://www.nyfcc.com/Film http://www.film.com/GoodFil.ms http://goodfil.ms/Cinephilia http://cinephilia.net/ScreenJunkies http://www.screenjunkies.com/IndieWire: http://www.indiewire.com/ 十八、公开课网站网易公开课：http://open.163.com/中国大学MOOC：http://www.icourse163.org/新浪公开课：http://open.sina.com.cn/央视网–公开课：http://opencla.cntv.cn/爱课堂：http://www.icourses.cn/home/MOOC中国：http://www.mooc.cn/超星公开课：http://openv.chaoxing.com/ 十九、小语种系列学习资源小语种入门：http://www.yingyurumen.com/小语种学习网：http://xyz.tingroom.com/其他小语种学习资源：http://wwwNaNzyk.com/h-nd-633.html 二十、其他系列资源学术网站大全：http://dir.cnki.net/常用二十六大学术搜素引擎：http://cmzyk.lofter.com/post/1cb13862_27ea8a6歌谱简谱搜索下载网站：http://suo.im/gz9xj10个LOGO资源站：http://www.uisdc.com/top-logo-design-resources10个无版权限制的大图特供网站：http://www.uisdc.com/free-hd-picture-website找工作必备网站大全：http://wwwNaNzyk.com/h-nd-j-79-4_5.html查询国内外文献资料的实用网站：http://cmzyk.lofter.com/post/1cb13862_5cc54cb法律网站大全：http://cmzyk.lofter.com/post/1cb13862_3189e56财经类网站大全：http://wwwNaNzyk.com/h-nd-j-182-4_5.html国外免费期刊全文数据库：http://cmzyk.lofter.com/post/1cb13862_27ea88a免费论文检测网站大全：http://cmzyk.lofter.com/post/1cb13862_26d511733个最值得读的世界级社科博客榜单：http://wwwNaNzyk.com/h-nd-101-109_361.html","categories":[{"name":"日常记录","slug":"日常记录","permalink":"http://tonglei.win/categories/日常记录/"}],"tags":[{"name":"来自网络","slug":"来自网络","permalink":"http://tonglei.win/tags/来自网络/"},{"name":"下载","slug":"下载","permalink":"http://tonglei.win/tags/下载/"}],"keywords":[{"name":"日常记录","slug":"日常记录","permalink":"http://tonglei.win/categories/日常记录/"}]},{"title":"找资源终极指南：90%的人都不知道的电影资源下载站","slug":"日常记录/找资源终极指南：90-的人都不知道的电影资源下载站","date":"2016-12-28T03:44:31.000Z","updated":"2017-01-09T07:13:45.603Z","comments":true,"path":"2016/12/28/日常记录/找资源终极指南：90-的人都不知道的电影资源下载站/","link":"","permalink":"http://tonglei.win/2016/12/28/日常记录/找资源终极指南：90-的人都不知道的电影资源下载站/","excerpt":"","text":"一、初级你已经有兴趣看电影了，区别于那些完全不看电影的人。你可以在各大视频网站在线观看，不介意效果差、片源少、更新慢的话推荐一个播放器——快播的继承者：西瓜影音。 跟快播的使用方法一模一样，下载一个西瓜影音播放器，打开网页即可观看电影。以下电影站，都可以：Tom51、西瓜电影、琪琪影院、看看电影院。 这些网站的特点是，站内广告超多，除了播放器里面没广告，网站上下左右全是广告、体验较差。 二、中级如果你不是特别热爱电影，只是闲暇之余看看热门的新片、美剧，也不特别要求画质与速度的话，下面这几个网站能满足你了： 迅播影院：http://www.xiamp4.com/ 4567TV：http://www.4567.tv/ 迅速影院：http://www.xunsu.cc 电影FM ：http://dianying.fm/ranking/imdb250 电影天堂：http://www.xiaopian.com/ 迅雷好： http://xunleihao.com/ 飘花电影：http://www.piaohua.com/ 6V电影 ：http://www.6vdy.com/ 圣城家园：http://www.cnscg.org/ Mp4吧：http://www.mp4ba.com/ 搬运工：http://banyungong.net/ 嘎嘎影视：http://www.gagays.com/ 小浣熊：http://www.xiaohx.com/ 乐搜：http://www.lesou.org/ 电影小二网：http://movie002.com/ 我爱P2P: http://www.byhh.org/ 三、高级（再往下看的话，请先准备好至少几十TB的硬盘，以及高性能的播放设备，否则后果很严重） 如果你有右列任一需求： 1、爱看经典老电影，2、爱看高清画质的电影，3、想尽快拿到新片资源。 恭喜，你已经被称为影迷了，那么最好学会用这些网站： 1.电影蜜蜂：http://www.dybee.net/ 目前已停止更新，但积累的资源相当丰富。注意网站右边的标签，某些标签的资源很丰富哦。 2.ED2000：http://www.ed2000.com/ 网站提供的都是电驴链接，电影资源很强大，游戏/音乐/软件都有 3.SimpleCD：http://www.simplecd.me/ 有电驴/种子/网盘等资源链接，很有名气的一个站。 4.BT天堂：http://www.bttiantang.com/ 片子很多，优点是对于热门电影来说，它提供了各大压制组、各版本的资源供选择，BDRip/720p/1080p等等，另外可以通过IMDB编号来搜索影片。 5.BT之家：http://bbs.1lou.com/ 综合性很强，在电影方面主要是中字熟肉，方便手机/iPad等移动设备观看。 6.顶好精品论坛（需注册）：http://www.bmdru.com/forum.php 重点推荐，影片分类很牛逼，比如著名导演的合集/TOP 250合集/三大电影节合集/CC标准收藏合集。 7.大米论坛（需注册）：http://www.iminisd.com/forum.php 国产片/港产片资源很强大 8.KICKASS：http://kickass.to/ 俗称“踢屁股”，也是个综合性种子站，新片老片应有尽有。 9.RARBG：http://www.rarbg.com/torrents.php 和KICKASS差不多，但是新片的发布速度貌似更快些，而且网页排版很好看。 10.Torrentz：http://torrentz.eu/ 综合型种子搜索引擎，很多资源帝都爱用，被称为“万金油BT站”。 11.SeeHD：http://www.seehd.org/ 以高清资源为主，720p/1080p/Remux/蓝光原盘，适合收藏党。 12.BTSPREAD：http://www.btspread.com/ 个人主要用来转换BT文件和磁力链接，也有种子搜索引擎，可搜番号。 13.Demonoid：http://www.demonoid.ph/ 这个站有一个特色，自压制的电影都带有花絮，前提是蓝光原盘有花絮的话。这是目前唯一一个压制电影时，附带压制花絮的站点。压制小组名是：Grym ，可以在该网站搜索此压制组的作品。 14.飞鸟论坛：http://bbs.hdbird.com/ 15.蓝影网：http://www.lanyingwang.com/ 最新的资源，会第一时间更新。除了最新资源的高清片源，还有同类型资源盘点等。纯净无广告、无需注册。除了资源，还有高清科普知识、影讯等内容。 16.星空家园，http://bbs.xskwhd.com/forum.php 搬运PT里的高清电影、电视剧、综艺资源，较丰富。 17.高清论坛，http://www.bt49.com/ 资源丰富，更新速度快 18.下载搜：http://www.somag.net/ 非常不错磁力下载站点，干净的站点，没有图片、截图等。 四、灭绝师太什么？你说你逼格特别的高？那也不要紧啊，下面还有一些适合淘冷门电影的网站。倘若碰到一些豆瓣评分人数不足的，甚至是没有条目的电影，这些网站可能会有奇效。好用的BT种子搜索引擎： Bitsnoop：http://bitsnoop.com/ 资源容量高达28PB，磁力站，可以配合上面的BTSPREAD转成种子。 BT Kitty：http://btkitty.org/ 号称共24.03PB大小的资源，来源于全球超过300个BT种子。 海盗湾：http://thepiratebay.ee/ 自称是目前世界上最大的BT种子服务器。 BTDigg：https://btdigg.org/ 磁力站，搜索关键字的能力较强，个人最爱用的网站。 ulozto：http://www.ulozto.net/ 据说搜捷克电影很好用，我没试过。 rutracker：http://rutracker.org/forum/index.php（俄罗斯BT站） BT搜搜：http://www.btsoso.me/ Btbook：http://t.cn/8sgPF9Q RunBT：http://t.cn/Rvn5wDB DiggBt：http://t.cn/RPhEeST BtDigg：http://t.cn/zWKSDdH 手撕包菜：http://t.cn/zHcP7Ue BT樱桃：http://t.cn/8sh3oB3 五、风清扬（无即是有）如果上述网站依旧找不到你要的电影，那就得自己动手去其他地方找了，下面介绍一些电影挖掘技术： 谷歌：懒人一般不会用，但除了网站之外，谷歌引擎是最靠谱的找片方法。搜索片名+download/torrent/magnet/ed2k等后缀，能找到不少冷门电影。 豆瓣条目：在豆瓣电影搜索片名之后，该影片的简介页面，就叫豆瓣条目。很多人忽视了这块地方：冷门电影的话，在条目的讨论区偶尔会有热心网友给出资源下载；短片的话，在条目的短评区会有热心网友给出在线观看地址。豆瓣小组：这个社区可以说是高手在民间，比如像是：第三世界电影资源，这种小组，里面会有很多珍贵片源，玩豆瓣的朋友可以慢慢发掘。 百度贴吧：贴吧精品区里有不少好东西，比如“北野武吧”就有不少粉丝上传的纪录片资源，“百度网盘吧”“360云盘吧”这种，偶尔会有人扔出一些容量几个T的资源合集。 小豆瓣影集：如果你不知道看什么电影？那么小豆瓣影集或许能够为你节省不少时间，大大提高你找电影的效率，这里有大量原创的精彩影集推荐，各种类型的电影盘点，电影爱好者必须要收藏的网址：http://www.xiaodouban.com/film-pandian。 关于资源搜索的技巧，这个才是重中之重好吗： 有些片子不一定搜一个片名就能搜出来，国内的网站主要搜索中文名，外网主要搜索外文名。而几乎所有的片名，都可以在对应的豆瓣条目简介里面找到，当然IMDB条目也有。国内的网站当然比较简单，比如《血色将至》这部片，你可以搜“血色将至”、“血色黑金”、“There Will Be Blood” 重点说下国外的网站，很多非英语片，除了中文译名之外，都会有两个片名，举个例子：《精疲力尽》这部片，你可以搜英文名“Breathless”、法文名“à bout de souffle”。《七武士》这部片，你可以搜中文名“七武士”，日文名“七人の侍”，英文名“Seven Samurai”，最好用的方法是搜索日语发音“Shichinin no samurai”，最后一种方法是在外网搜索日语片的首选。有些名字相同的片子，可以在后面加上年份，方便区分，比如希区柯克的《惊魂记》，可以搜“psycho 1960”。想高清的可片名+720p/1080p/bluray等后缀。 搜电影原声，可搜索片名+soundtrack/OST 在谷歌上搜索某个导演的合集，可以加上collection这个后缀，比如搜伍迪艾伦的，“Woody Allen collection”。 搜冷门片，可以用刚刚提到的方法，搜索片名+download/torrent/magnet/ed2k 最后说一下的是关于字幕的问题： Sub HD 字幕站：http://subhd.com/ 伪射手网：http://sub.makedie.me/ 寻找英文/小语种的字幕：http://t.cn/8sjjac7 关于字幕的一些小科普：http://t.cn/Rh3uKxR 补充特色网站KiSHD，http://www.kishd.org/，韩影、韩剧、韩国综艺等，资源丰富。还有自己的韩语字幕组。 立体中国，http://bbs.cnliti.com/，主打3D资源 纪录片之家，http://www.jlpzj.net/ ，最丰富的纪录片资源站点 同志亦凡人，http://www.qafone.co/ ，gay片网站 印度电影论坛：http://www.indmi.com/ ，印度电影资源丰富，还有印度相关知识","categories":[{"name":"日常记录","slug":"日常记录","permalink":"http://tonglei.win/categories/日常记录/"}],"tags":[{"name":"来自网络","slug":"来自网络","permalink":"http://tonglei.win/tags/来自网络/"},{"name":"下载","slug":"下载","permalink":"http://tonglei.win/tags/下载/"}],"keywords":[{"name":"日常记录","slug":"日常记录","permalink":"http://tonglei.win/categories/日常记录/"}]},{"title":"论语","slug":"文学学习/论语","date":"2016-12-06T03:26:09.000Z","updated":"2017-01-09T07:13:45.603Z","comments":true,"path":"2016/12/06/文学学习/论语/","link":"","permalink":"http://tonglei.win/2016/12/06/文学学习/论语/","excerpt":"","text":"论语二十篇 全文阅读：https://tonglei0429.github.io/lunyu/ PDF下载 书籍目录 论语简介 学而第一 为政第二 八佾第三 里仁第四 公冶长第五 雍也第六 述而第七 泰伯第八 子罕第九 乡党第十 先进第十一 颜渊第十二 子路第十三 宪问第十四 卫灵公第十五 季氏第十六 阳货第十七 微子第十八 子张第十九 尧曰第二十","categories":[{"name":"文学学习","slug":"文学学习","permalink":"http://tonglei.win/categories/文学学习/"}],"tags":[{"name":"国学","slug":"国学","permalink":"http://tonglei.win/tags/国学/"},{"name":"论语","slug":"论语","permalink":"http://tonglei.win/tags/论语/"},{"name":"孔子","slug":"孔子","permalink":"http://tonglei.win/tags/孔子/"}],"keywords":[{"name":"文学学习","slug":"文学学习","permalink":"http://tonglei.win/categories/文学学习/"}]},{"title":"学习MYSQL5.7免装版的使用","slug":"IT学习/数据库/学习MYSQL5-7免装版的使用","date":"2016-11-03T15:29:55.000Z","updated":"2017-01-07T01:13:51.956Z","comments":true,"path":"2016/11/03/IT学习/数据库/学习MYSQL5-7免装版的使用/","link":"","permalink":"http://tonglei.win/2016/11/03/IT学习/数据库/学习MYSQL5-7免装版的使用/","excerpt":"","text":"前言Mysql5.7 以后压缩包中不再包含data文件夹，相对应的数据库初始化工作也稍有改变，在此记录。 下载压缩包对于一般人来说，Mysql社区版就足够耍了，下载地址如下：http://dev.mysql.com/downloads/mysql/ win32版: http://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.16-win32.zip win64版 http://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.16-winx64.zip 其他版本自己选链接 环境配置 将已下载的 ZIP 解压，并将 bin 目录添加到系统环境变量 path 中; 重命名解压文件夹中的 my-default.ini 为 my.ini; 在 my.ini 中设置各个参数，如:123456[mysqld]basedir = E:/projects/mysql-dbdatadir = E:/projects/mysql-db/dataport = 3306character-set-server=utf8sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES 初始化Mysql初始化也就是创建 data 目录的过程，使用以下命令(管理员)：1$ mysqld --initialize 或1$ mysqld --initialize-insecure 前者为root用户创建随机密码，后者不设置 root 用户密码 启动 Mysql Server完成以上步骤后就可以直接启动Mysql了，命令如下：1$ mysqld --console 注册 Mysql Server 为系统服务（可选）如果希望注册为系统服务，可以敲这个：1$ mysqld --install 注销删除服务为1$ mysqld --remove 启动和停止服务的命令为：12$ net start mysql$ net stop mysql 就到这里，玩的愉快！","categories":[{"name":"IT学习","slug":"IT学习","permalink":"http://tonglei.win/categories/IT学习/"},{"name":"数据库","slug":"IT学习/数据库","permalink":"http://tonglei.win/categories/IT学习/数据库/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://tonglei.win/tags/mysql/"},{"name":"database","slug":"database","permalink":"http://tonglei.win/tags/database/"}],"keywords":[{"name":"IT学习","slug":"IT学习","permalink":"http://tonglei.win/categories/IT学习/"},{"name":"数据库","slug":"IT学习/数据库","permalink":"http://tonglei.win/categories/IT学习/数据库/"}]},{"title":"理解OAuth2.0协议-基础篇","slug":"IT学习/SSO/理解OAuth2.0协议-基础篇","date":"2016-10-25T06:01:01.000Z","updated":"2017-01-07T01:13:51.956Z","comments":true,"path":"2016/10/25/IT学习/SSO/理解OAuth2.0协议-基础篇/","link":"","permalink":"http://tonglei.win/2016/10/25/IT学习/SSO/理解OAuth2.0协议-基础篇/","excerpt":"","text":"什么是OAuth2.0？https://oauth.net/2/ 说： OAuth 2.0 is the next evolution of the OAuth protocol which was originally created in late 2006. OAuth 2.0 focuses on client developer simplicity while providing specific authorization flows for web applications, desktop applications, mobile phones, and living room devices. This specification is being developed within the IETF OAuth WG. OAuth（开放授权）是一个开放标准，允许用户授权第三方网站访问他们存储在另外的服务提供者上的信息，而不需要将用户名和密码提供给第三方网站或分享他们数据的所有内容。 OAuth2.0 是在 OAuth 基础上的简化与优化，虽然不向下兼容，但是和OAuth 有着相似的理论。 OAuth2.0 的角色资源所有者 resource owner (RO)指对某种资源拥有授权能力的实体，如果资源属于某个人的话，这个 RO 就是这个人的终端账户。 资源服务器 resource server (RS)指某种资源的容器，RS 通过判断 Access Token 是否有效决定资源是否被授权访问。 客户端 client (C)指需要访问某个用户的受保护资源的客户端程序，既可以是个桌面程序，也可以是个浏览器，也可以是个后台服务。 认证服务端 authorization server (AS)指颁发 Access Token 给客户端的服务，当然颁发之前要对 RO 进行认证并且由 RO 完成授权。 OAuth2.0 协议流程从上面的角色可以猜到，OAuth2.0 认证发生在某个资源拥有者希望通过客户端访问其所有资源的时候。例如：网站 wepass.vip 希望实现微信登录，并获取用户微信的头像，那这时候 wepass.vip 这个网站本身就可以看作是一个 Client，作为拥有微信的我，就是一个资源拥有者（RO），要获取的头像就是我的资源（其实用户名密码本身也属于资源），而 RS（存头像的那个服务器） 和 AS （给认证的那个服务器） 则全部是由腾讯开放平台提供。 所以，当我（RO）想在 wepass.vip （Client） 上看到我的头像（Resource）的时候，我会先访问 wepass.vip，然后 wepass.vip 发现我没登录，就求腾讯（AS）给我验身，然后我在腾讯的认证服务器（AS）上输入我的用户名口令（或者二维码、或者快捷登录），如果腾讯认可我（有时还需要认可Client），就会生成一个 Access Token，wepass.vip 再通过Access Token 去腾讯的资源服务器（RS）上要我的头像，然后再展示给我，这样就完成了一个 OAuth2.0 认证。 这样做的好处是：wepass.vip 不会得到我的用户名密码，但是依然可以相信我的身份，而我也只需要记住自己的微信口令，就可以同时登录 wepass1、wepass2、wepass3 … 也就是实现了单点登录。 看图（纯手绘）：1234567891011121314151617+--------+ +---------------+| |--(A)- Authorization Request -&gt;| Resource || | | Owner || |&lt;-(B)-- Authorization Grant ---| || | +---------------+| || | +---------------+| |--(C)-- Authorization Grant --&gt;| Authorization || Client | | Server || |&lt;-(D)----- Access Token -------| || | +---------------+| || | +---------------+| |--(E)----- Access Token ------&gt;| Resource || | | Server || |&lt;-(F)--- Protected Resource ---| |+--------+ +---------------+ 还有一些常见概念许可类型 Authorization Grant由于第三方应用（client）的多样性，OAuth2.0提出了多种授权类型： 如授权码 Authorization Code Grant 这种类型 AS 在完成 RO 的认证和授权后，给 Client 一个 Code, Client 带着 Code 再去换 AccessToken，再用 AccessToken 访问资源。 隐式授权 Implicit Grant 这种情况下，RO 认证并授权后，AS 会把 AccessToken 直接交给 Client，而不需要 Client 保存 Authorization Code，再去换取 Access Token。这种场景适合于没有服务端的程序，也就是没有办法对 Authorization Code 进行保密的 Client 类型。 RO凭证授权 Resource Owner Password Credentials Grant 这是一种 RO 对 Client 高度可信的授权方式，RO 要把自己的凭证（用户名、密码）交给 Client，Client 直接拿去向 AS 请求 Access Token。 Client凭证授权 Client Credentials Grant 这种场景下 AS 只需要认证 Client，比较适合于待访问资源的安全级别不高或者资源只属于这个 Client 的场景。 访问令牌 Access Token访问令牌就是为了访问资源用的，一般是字符串形式，里面标注了其范围（Scope）和寿命（Duration）。 续期令牌 Refresh Token续期令牌就是在当前的访问令牌到期时，为期续期使用的。续期令牌是个可选项，它会和访问令牌一起颁发给Client，只不过续期令牌指在 AS 上使用，不在 RS 上使用。 传输层安全性版本 TLS VersionTLS = Transport Layer Security，如果使用了 TLS，我们就要对其遵循的规范版本进行标注。目前最新的版本号为1.2，最广泛的版本号为1.0。 谁在用 OAuth2.0？ 百度开发者中心 腾讯开放平台 谷歌开发者中心(估计你打不开) 微博开发平台 还有HP、IBM、Oracle等等等等，有头有脸有用户的大公司都有自己的 AS 和 RS。 下次再聊聊客户端的注册 玩得开心！","categories":[{"name":"IT学习","slug":"IT学习","permalink":"http://tonglei.win/categories/IT学习/"},{"name":"SSO","slug":"IT学习/SSO","permalink":"http://tonglei.win/categories/IT学习/SSO/"}],"tags":[{"name":"oauth2","slug":"oauth2","permalink":"http://tonglei.win/tags/oauth2/"},{"name":"sso","slug":"sso","permalink":"http://tonglei.win/tags/sso/"}],"keywords":[{"name":"IT学习","slug":"IT学习","permalink":"http://tonglei.win/categories/IT学习/"},{"name":"SSO","slug":"IT学习/SSO","permalink":"http://tonglei.win/categories/IT学习/SSO/"}]},{"title":"学习ApacheCxf+Spring建立Rest服务","slug":"IT学习/Java/学习ApacheCxf+Spring建立Rest服务","date":"2016-10-24T03:20:00.000Z","updated":"2017-01-07T01:13:51.956Z","comments":true,"path":"2016/10/24/IT学习/Java/学习ApacheCxf+Spring建立Rest服务/","link":"","permalink":"http://tonglei.win/2016/10/24/IT学习/Java/学习ApacheCxf+Spring建立Rest服务/","excerpt":"","text":"用到的工具 maven 做依赖管理 Spring 做容器 Cxf 做服务框架 实现步骤首先在 Maven 的 pom.xml 文件中配置，配置好依赖pom.xml 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;wepass.vip&lt;/groupId&gt; &lt;artifactId&gt;wecard-api-service-java&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;parent&gt; &lt;groupId&gt;wepass.vip&lt;/groupId&gt; &lt;artifactId&gt;wecard-java&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;relativePath&gt;../&lt;/relativePath&gt; &lt;/parent&gt; &lt;properties&gt; &lt;tomcat.version&gt;8.5.2&lt;/tomcat.version&gt; &lt;cxf.version&gt;3.1.7&lt;/cxf.version&gt; &lt;jackson.version&gt;2.4.1&lt;/jackson.version&gt; &lt;spring.version&gt;4.2.6.RELEASE&lt;/spring.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt; &lt;artifactId&gt;tomcat-embed-core&lt;/artifactId&gt; &lt;version&gt;$&#123;tomcat.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt; &lt;artifactId&gt;tomcat-embed-logging-juli&lt;/artifactId&gt; &lt;version&gt;$&#123;tomcat.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt; &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt; &lt;version&gt;$&#123;tomcat.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt; &lt;artifactId&gt;tomcat-jasper&lt;/artifactId&gt; &lt;version&gt;$&#123;tomcat.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt; &lt;artifactId&gt;tomcat-jasper-el&lt;/artifactId&gt; &lt;version&gt;$&#123;tomcat.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt; &lt;artifactId&gt;tomcat-jsp-api&lt;/artifactId&gt; &lt;version&gt;$&#123;tomcat.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- Spring --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-web&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- CXF --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt; &lt;artifactId&gt;cxf-rt-frontend-jaxrs&lt;/artifactId&gt; &lt;version&gt;$&#123;cxf.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.jaxrs&lt;/groupId&gt; &lt;artifactId&gt;jackson-jaxrs-json-provider&lt;/artifactId&gt; &lt;version&gt;2.7.4&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;finalName&gt;wecard-api-service&lt;/finalName&gt; &lt;/build&gt;&lt;/project&gt; 创建 Web 应用，在 web.xml 中配置 Spring 上下文web.xml 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;web-app version=\"3.0\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"&gt; &lt;display-name&gt;微卡API服务平台&lt;/display-name&gt; &lt;description&gt;Powered by wePass.vip&lt;/description&gt; &lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath*:/application-context.xml&lt;/param-value&gt; &lt;/context-param&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt; &lt;servlet&gt; &lt;servlet-name&gt;CXFService&lt;/servlet-name&gt; &lt;servlet-class&gt;org.apache.cxf.transport.servlet.CXFServlet&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;CXFService&lt;/servlet-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.html&lt;/welcome-file&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;error-page&gt; &lt;error-code&gt;404&lt;/error-code&gt; &lt;location&gt;/404.html&lt;/location&gt; &lt;/error-page&gt;&lt;/web-app&gt; 配置 Spring 容器，增加 Rest 访问入口application-context.xml 1234567891011121314151617181920212223242526&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:jaxrs=\"http://cxf.apache.org/jaxrs\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd\"&gt; &lt;bean id=\"restSample\" class=\"demo.spring.service.RESTSampleSource\"/&gt; &lt;!-- 重点就在这里！WebService --&gt; &lt;jaxrs:server id=\"restServiceContainer\" address=\"/rest\"&gt; &lt;jaxrs:serviceBeans&gt; &lt;ref bean=\"restSample\"/&gt; &lt;/jaxrs:serviceBeans&gt; &lt;jaxrs:extensionMappings&gt; &lt;entry key=\"json\" value=\"application/json\"/&gt; &lt;entry key=\"xml\" value=\"application/xml\"/&gt; &lt;/jaxrs:extensionMappings&gt; &lt;jaxrs:languageMappings&gt; &lt;entry key=\"cn\" value=\"cn-ZH\"/&gt; &lt;/jaxrs:languageMappings&gt; &lt;jaxrs:providers&gt; &lt;bean class=\"com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider\" /&gt; &lt;/jaxrs:providers&gt; &lt;/jaxrs:server&gt;&lt;/beans&gt; 以下是 Java 相关代码，包含实体类User 和 Users，Rest接口及实现User.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package demo.spring.service;import com.fasterxml.jackson.annotation.JsonIgnoreProperties;import javax.xml.bind.annotation.XmlRootElement;/** * Created by Booker on 16/10/12. */@XmlRootElement(name = \"UserInfo\")@JsonIgnoreProperties(&#123;\"handler\", \"hibernateLazyInitializer\"&#125;)public class User &#123; private int id; private String name = \"123\"; private String email = \"456\"; private String address = \"789\"; @Override public String toString() &#123; return this.id + \"#\" + this.name + \"#\" + this.email + \"#\" + this.address; &#125; public void setName(String name) &#123; this.name = name; &#125; public void setId(int id) &#123; this.id = id; &#125; public void setEmail(String email) &#123; this.email = email; &#125; public void setAddress(String address) &#123; this.address = address; &#125; public int getId() &#123; return id; &#125; public String getName() &#123; return name; &#125; public String getEmail() &#123; return email; &#125; public String getAddress() &#123; return address; &#125;&#125; Users.java 1234567891011121314151617181920212223242526272829303132333435363738394041package demo.spring.service;import java.util.HashMap;import java.util.List;import javax.xml.bind.annotation.XmlRootElement;/** * Created by Booker on 16/10/12. */@XmlRootElement(name = \"UserInfos\")public class Users &#123; private List&lt;User&gt; users; private User[] userArr; private HashMap&lt;String, User&gt; maps; public List&lt;User&gt; getUsers() &#123; return users; &#125; public void setUsers(List&lt;User&gt; users) &#123; this.users = users; &#125; public User[] getUserArr() &#123; return userArr; &#125; public void setUserArr(User[] userArr) &#123; this.userArr = userArr; &#125; public HashMap&lt;String, User&gt; getMaps() &#123; return maps; &#125; public void setMaps(HashMap&lt;String, User&gt; maps) &#123; this.maps = maps; &#125;&#125; RESTSample.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960package demo.spring.service;import java.io.IOException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.ws.rs.Consumes;import javax.ws.rs.DELETE;import javax.ws.rs.GET;import javax.ws.rs.POST;import javax.ws.rs.PUT;import javax.ws.rs.Path;import javax.ws.rs.PathParam;import javax.ws.rs.Produces;import javax.ws.rs.core.Context;import javax.ws.rs.core.MediaType;/** * Created by Booker on 16/10/12. */@Path(value = \"/sample\")public interface RESTSample &#123; @GET @Produces(MediaType.TEXT_PLAIN) public String doGet(); @GET @Produces(MediaType.TEXT_PLAIN) @Path(\"/request/&#123;param&#125;\") public String doRequest(@PathParam(\"param\") String param, @Context HttpServletRequest servletRequest, @Context HttpServletResponse servletResponse); @GET @Path(\"/bean/&#123;id&#125;\") @Produces(&#123;MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON&#125;) public User getBean(@PathParam(\"id\") int id); @GET @Path(\"/list\") @Produces(&#123;MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML&#125;) public Users getList(); @GET @Path(\"/map\") @Produces(&#123;MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON&#125;) public MapBean getMap(); @POST @Path(\"/postData\") public User postData(User user) throws IOException; @PUT @Path(\"/putData/&#123;id&#125;\") @Consumes(MediaType.APPLICATION_XML) public User putData(@PathParam(\"id\") int id, User user); @DELETE @Path(\"/removeData/&#123;id&#125;\") public void deleteData(@PathParam(\"id\") int id);&#125; RESTSampleSource.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960package demo.spring.service;import java.io.IOException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.ws.rs.Consumes;import javax.ws.rs.DELETE;import javax.ws.rs.GET;import javax.ws.rs.POST;import javax.ws.rs.PUT;import javax.ws.rs.Path;import javax.ws.rs.PathParam;import javax.ws.rs.Produces;import javax.ws.rs.core.Context;import javax.ws.rs.core.MediaType;/** * Created by Booker on 16/10/12. */@Path(value = \"/sample\")public interface RESTSample &#123; @GET @Produces(MediaType.TEXT_PLAIN) public String doGet(); @GET @Produces(MediaType.TEXT_PLAIN) @Path(\"/request/&#123;param&#125;\") public String doRequest(@PathParam(\"param\") String param, @Context HttpServletRequest servletRequest, @Context HttpServletResponse servletResponse); @GET @Path(\"/bean/&#123;id&#125;\") @Produces(&#123;MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON&#125;) public User getBean(@PathParam(\"id\") int id); @GET @Path(\"/list\") @Produces(&#123;MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML&#125;) public Users getList(); @GET @Path(\"/map\") @Produces(&#123;MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON&#125;) public MapBean getMap(); @POST @Path(\"/postData\") public User postData(User user) throws IOException; @PUT @Path(\"/putData/&#123;id&#125;\") @Consumes(MediaType.APPLICATION_XML) public User putData(@PathParam(\"id\") int id, User user); @DELETE @Path(\"/removeData/&#123;id&#125;\") public void deleteData(@PathParam(\"id\") int id);&#125; 最后是启动类12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package demo.spring;import org.apache.catalina.LifecycleException;import org.apache.catalina.WebResourceRoot;import org.apache.catalina.core.StandardContext;import org.apache.catalina.startup.Tomcat;import org.apache.catalina.webresources.DirResourceSet;import org.apache.catalina.webresources.StandardRoot;import javax.servlet.ServletException;import java.io.File;/** * Created by Booker on 16/10/10. */public class ApiService &#123; public static void run() throws ServletException, LifecycleException &#123; String webappDirLocation = \"src/main/webapp/\"; Tomcat tomcat = new Tomcat(); //The port that we should run on can be set into an environment variable //Look for that variable and default to 8080 if it isn't there. String webPort = System.getenv(\"PORT\"); if (webPort == null || webPort.isEmpty()) &#123; webPort = \"8080\"; &#125; tomcat.setPort(Integer.valueOf(webPort)); StandardContext ctx = (StandardContext) tomcat.addWebapp(\"\", new File(webappDirLocation).getAbsolutePath()); System.out.println(\"configuring app with basedir: \" + new File(\"./\" + webappDirLocation).getAbsolutePath()); // Declare an alternative location for your \"WEB-INF/classes\" dir // Servlet 3.0 annotation will work File additionWebInfClasses = new File(\"target/classes\"); WebResourceRoot resources = new StandardRoot(ctx); resources.addPreResources(new DirResourceSet(resources, \"/WEB-INF/classes\", additionWebInfClasses.getAbsolutePath(), \"/\")); ctx.setResources(resources); tomcat.start(); tomcat.getServer().await(); &#125; public static void main(String[] args) &#123; try &#123; ApiService.run(); &#125; catch (ServletException e) &#123; e.printStackTrace(); &#125; catch (LifecycleException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 运行与测试1$ java demo.spring.ApiService 访问：http://localhost:8080/rest/sample/list 得到如下显示： 12345678910111213141516171819202122232425&lt;users&gt;&lt;address&gt;789&lt;/address&gt;&lt;email&gt;456&lt;/email&gt;&lt;id&gt;0&lt;/id&gt;&lt;name&gt;name-0&lt;/name&gt;&lt;/users&gt;&lt;users&gt;&lt;address&gt;789&lt;/address&gt;&lt;email&gt;456&lt;/email&gt;&lt;id&gt;1&lt;/id&gt;&lt;name&gt;name-1&lt;/name&gt;&lt;/users&gt;&lt;users&gt;&lt;address&gt;789&lt;/address&gt;&lt;email&gt;456&lt;/email&gt;&lt;id&gt;2&lt;/id&gt;&lt;name&gt;name-2&lt;/name&gt;&lt;/users&gt;&lt;users&gt;&lt;address&gt;789&lt;/address&gt;&lt;email&gt;456&lt;/email&gt;&lt;id&gt;3&lt;/id&gt;&lt;name&gt;name-3&lt;/name&gt;&lt;/users&gt;&lt;/UserInfos&gt; 源码下载https://github.com/tonglei0429/samples/tree/master/j2ee/cxf-spring-rest","categories":[{"name":"IT学习","slug":"IT学习","permalink":"http://tonglei.win/categories/IT学习/"},{"name":"Java","slug":"IT学习/Java","permalink":"http://tonglei.win/categories/IT学习/Java/"}],"tags":[{"name":"spring","slug":"spring","permalink":"http://tonglei.win/tags/spring/"},{"name":"java","slug":"java","permalink":"http://tonglei.win/tags/java/"},{"name":"apache cxf","slug":"apache-cxf","permalink":"http://tonglei.win/tags/apache-cxf/"},{"name":"源码","slug":"源码","permalink":"http://tonglei.win/tags/源码/"}],"keywords":[{"name":"IT学习","slug":"IT学习","permalink":"http://tonglei.win/categories/IT学习/"},{"name":"Java","slug":"IT学习/Java","permalink":"http://tonglei.win/categories/IT学习/Java/"}]},{"title":"学习ApacheCxf+Spring建立Rest服务","slug":"IT学习/Java/学习ApacheCxf+Spring建立OAuth2服务","date":"2016-10-24T03:20:00.000Z","updated":"2017-01-07T01:13:51.956Z","comments":true,"path":"2016/10/24/IT学习/Java/学习ApacheCxf+Spring建立OAuth2服务/","link":"","permalink":"http://tonglei.win/2016/10/24/IT学习/Java/学习ApacheCxf+Spring建立OAuth2服务/","excerpt":"","text":"Apache CXF &gt; RESTful Services &gt; JAX-RS &gt; JAX-RS OAuth2官方文档: http://cxf.apache.org/docs/jax-rs-oauth2.html 介绍Apache 的 CXF 可以实现 OAuth2.0实现 OAuth2.0 需要这么几步： 浏览器访问第三方网站； 带着它的客户端ID，状态，地址等信息跳转到 OAuth2.0 服务，服务给它授权； OAuth2.0 服务端用请求的 ClientID 生成登录表单给终端用户，用户登录并给第三方应用授权； 登录成功返回授权码等一大堆参数给第三方应用； 客户端用授权码请求票据； 获取票据之后，客户端允许终端用户访问其资源。 Maven依赖12345&lt;dependency&gt; &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt; &lt;artifactId&gt;cxf-rt-rs-security-oauth2&lt;/artifactId&gt; &lt;version&gt;3.1.7&lt;/version&gt;&lt;/dependency&gt; 服务端开发三步： 挑战用户，然后将授权码返回客户端 用授权码生成票据 验证票据","categories":[{"name":"IT学习","slug":"IT学习","permalink":"http://tonglei.win/categories/IT学习/"},{"name":"Java","slug":"IT学习/Java","permalink":"http://tonglei.win/categories/IT学习/Java/"}],"tags":[{"name":"oauth2","slug":"oauth2","permalink":"http://tonglei.win/tags/oauth2/"},{"name":"spring","slug":"spring","permalink":"http://tonglei.win/tags/spring/"},{"name":"java","slug":"java","permalink":"http://tonglei.win/tags/java/"},{"name":"apache cxf","slug":"apache-cxf","permalink":"http://tonglei.win/tags/apache-cxf/"},{"name":"源码","slug":"源码","permalink":"http://tonglei.win/tags/源码/"}],"keywords":[{"name":"IT学习","slug":"IT学习","permalink":"http://tonglei.win/categories/IT学习/"},{"name":"Java","slug":"IT学习/Java","permalink":"http://tonglei.win/categories/IT学习/Java/"}]},{"title":"微信小程序官方手册离线版本发布","slug":"IT学习/微信/微信小程序官方手册离线版本发布","date":"2016-10-18T06:41:45.000Z","updated":"2017-01-07T01:13:51.956Z","comments":true,"path":"2016/10/18/IT学习/微信/微信小程序官方手册离线版本发布/","link":"","permalink":"http://tonglei.win/2016/10/18/IT学习/微信/微信小程序官方手册离线版本发布/","excerpt":"","text":"微信小程序微信官方日前发布了关于小程序的帮助手册，起地址为： https://mp.weixin.qq.com/debug/wxadoc/dev/ 如果需要最新离线版，可以打开 https://wechats.github.io/tinyapp-doc/ 然后点右上角的 pdf 图标 快速下载通道 类型 地址 html https://github.com/wechats/tinyapp-doc/archive/master.zip pdf https://wechats.github.io/tinyapp-doc/gen/tinyapp-doc.pdf epub https://wechats.github.io/tinyapp-doc/gen/tinyapp-doc.epub mobi https://wechats.github.io/tinyapp-doc/gen/tinyapp-doc.mobi","categories":[{"name":"IT学习","slug":"IT学习","permalink":"http://tonglei.win/categories/IT学习/"},{"name":"微信","slug":"IT学习/微信","permalink":"http://tonglei.win/categories/IT学习/微信/"}],"tags":[{"name":"gitbook","slug":"gitbook","permalink":"http://tonglei.win/tags/gitbook/"},{"name":"微信","slug":"微信","permalink":"http://tonglei.win/tags/微信/"},{"name":"小程序","slug":"小程序","permalink":"http://tonglei.win/tags/小程序/"},{"name":"离线","slug":"离线","permalink":"http://tonglei.win/tags/离线/"}],"keywords":[{"name":"IT学习","slug":"IT学习","permalink":"http://tonglei.win/categories/IT学习/"},{"name":"微信","slug":"IT学习/微信","permalink":"http://tonglei.win/categories/IT学习/微信/"}]},{"title":"学习gitbook发布自己的电子书","slug":"IT学习/Gitbook/学习gitbook发布自己的电子书","date":"2016-10-18T02:34:01.000Z","updated":"2017-01-07T01:13:51.956Z","comments":true,"path":"2016/10/18/IT学习/Gitbook/学习gitbook发布自己的电子书/","link":"","permalink":"http://tonglei.win/2016/10/18/IT学习/Gitbook/学习gitbook发布自己的电子书/","excerpt":"","text":"关于 Gitbook来自官网的介绍 GitBook is a modern publishing toolchain. Making both writing and collaboration easy. GitBook 是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书，GitBook 并非关于 Git 的教程。 GitBook支持输出多种文档格式： 静态站点：GitBook默认输出该种格式，生成的静态站点可直接托管搭载Github Pages服务上； PDF：需要安装gitbook-pdf依赖； eBook：需要安装ebook-convert； 单HTML网页：支持将内容输出为单页的HTML，不过一般用在将电子书格式转换为PDF或eBook的中间过程； JSON：一般用于电子书的调试或元数据提取。 Gitbook 的效果展示 微信小程序使用手册 https://wechats.github.io/tinyapp-doc/ Gitbook 的用法 首先安装 nodejs 和 npm 全局安装GitBook1$ npm install gitbook-cli -g 创建一本书1$ gitbook init [目录名] 这时会在对应目录下生成 README.md 和 SUMMARY.md。README.md 即为书的简介，会作为书的第一页显示。SUMMARY.md 是书的目录，是 Gitbook 生成电子书的文件索引。 手动添加 book.json (可选)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&#123; &quot;plugins&quot;: [ &quot;betterchinese&quot;, &quot;-duoshuo&quot;, &quot;highlight&quot;, &quot;lunr&quot;, &quot;baidu_gio&quot;, &quot;search&quot;, &quot;fontsettings&quot;, &quot;theme-default&quot;, &quot;toolbar&quot;, &quot;sharing&quot; ], &quot;pluginsConfig&quot;: &#123; &quot;lunr&quot;: &#123; &quot;maxIndexSize&quot;: 1000000, &quot;ignoreSpecialCharacters&quot;: false &#125;, &quot;baidu_gio&quot;: &#123; &quot;token&quot;: &quot;You Token&quot; &#125;, &quot;toolbar&quot;: &#123; &quot;buttons&quot;: [ &#123; &quot;label&quot;: &quot;GitHub&quot;, &quot;icon&quot;: &quot;fa fa-github&quot;, &quot;url&quot;: &quot;https://github.com/wechats/tinyapp-doc&quot; &#125;, &#123; &quot;label&quot;: &quot;PDF&quot;, &quot;icon&quot;: &quot;fa fa-file-pdf-o&quot;, &quot;url&quot;: &quot;https://wechats.github.io/tinyapp-doc/gen/tinyapp-doc.pdf&quot; &#125; ] &#125;, &quot;sharing&quot;: &#123; &quot;facebook&quot;: false, &quot;twitter&quot;: false, &quot;google&quot;: false, &quot;weibo&quot;: true, &quot;instapaper&quot;: false, &quot;vk&quot;: false, &quot;all&quot;: [&quot;weibo&quot;] &#125; &#125;&#125; book.json 是 Gitbook 的配置文件，plugins 元素定义 Gitbook 需要哪些插件，开头有‘-’代表禁用某个插件，pluginsConfig 定义某个插件的配置。Gitbook 默认包含的插件分别是： highlight search lunr sharing fontsettings theme-default 如果想安装新插件，只需要先查询到插件名，然后写到 plugins 里面，再执行 1$ gitbook install Gitbook 会自动安装并使用新插件。 Gitbook 的测试当编辑完 Gitbook，我们可以通过以下命令进行测试： 1$ gitbook serve 然后访问 http://localhost:4000 就能看到书的效果 Gitbook 静态网站的生成通过以下命令，可以输出 Gitbook 静态网站到 _book 文件夹 1$ gitbook build 打包 PDF 等电子书的命令1$ gitbook pdf 1$ gitbook mobi 1$ gitbook epub 最后，将 _book 上传到自己的静态网页托管服务器就Over了！ PS: Gitbook 的相关资源地址Gitbook 官网： https://www.gitbook.com Gitbook Github: https://github.com/GitbookIO/gitbook Gitbook Editor: https://www.gitbook.com/editor Gitbook 插件页：http://plugins.gitbook.com Gitbook 官方手册：http://toolchain.gitbook.com/ 玩得愉快！","categories":[{"name":"IT学习","slug":"IT学习","permalink":"http://tonglei.win/categories/IT学习/"},{"name":"Gitbook","slug":"IT学习/Gitbook","permalink":"http://tonglei.win/categories/IT学习/Gitbook/"}],"tags":[{"name":"git","slug":"git","permalink":"http://tonglei.win/tags/git/"},{"name":"gitbook","slug":"gitbook","permalink":"http://tonglei.win/tags/gitbook/"}],"keywords":[{"name":"IT学习","slug":"IT学习","permalink":"http://tonglei.win/categories/IT学习/"},{"name":"Gitbook","slug":"IT学习/Gitbook","permalink":"http://tonglei.win/categories/IT学习/Gitbook/"}]},{"title":"学习Git更改注释编辑器","slug":"IT学习/Git/学习Git更改注释编辑器","date":"2016-10-11T06:46:44.000Z","updated":"2017-01-07T01:13:51.956Z","comments":true,"path":"2016/10/11/IT学习/Git/学习Git更改注释编辑器/","link":"","permalink":"http://tonglei.win/2016/10/11/IT学习/Git/学习Git更改注释编辑器/","excerpt":"","text":"Git 在 Windows 下默认会使用 Vi 风格的编辑器，如果想更换，如使用 Windows 记事本，可以通过以下命令实现： git config --global core.editor notepad.exe","categories":[{"name":"IT学习","slug":"IT学习","permalink":"http://tonglei.win/categories/IT学习/"},{"name":"Git","slug":"IT学习/Git","permalink":"http://tonglei.win/categories/IT学习/Git/"}],"tags":[{"name":"git","slug":"git","permalink":"http://tonglei.win/tags/git/"}],"keywords":[{"name":"IT学习","slug":"IT学习","permalink":"http://tonglei.win/categories/IT学习/"},{"name":"Git","slug":"IT学习/Git","permalink":"http://tonglei.win/categories/IT学习/Git/"}]},{"title":"学习Git保存Http[s]远端库用户名密码","slug":"IT学习/Git/学习Git保存Http[s]远端库用户名密码","date":"2016-10-10T15:59:06.000Z","updated":"2017-01-07T01:13:51.956Z","comments":true,"path":"2016/10/10/IT学习/Git/学习Git保存Http[s]远端库用户名密码/","link":"","permalink":"http://tonglei.win/2016/10/10/IT学习/Git/学习Git保存Http[s]远端库用户名密码/","excerpt":"","text":"Git 使用 Http/Https 方式连接的远端库，会在每次提交时要求输入用户名密码。如果需要记住用户名密码，可以通过以下方式解决： 查看远端库的配置git remote -v 删除远端库配置git remote rm origin 增加带用户名密码的远端库配置git remote add origin http[s]://{username}:{password}@domain/group/repository.git 再次提交已跳过输入用户名密码的步骤。","categories":[{"name":"IT学习","slug":"IT学习","permalink":"http://tonglei.win/categories/IT学习/"},{"name":"Git","slug":"IT学习/Git","permalink":"http://tonglei.win/categories/IT学习/Git/"}],"tags":[{"name":"git","slug":"git","permalink":"http://tonglei.win/tags/git/"}],"keywords":[{"name":"IT学习","slug":"IT学习","permalink":"http://tonglei.win/categories/IT学习/"},{"name":"Git","slug":"IT学习/Git","permalink":"http://tonglei.win/categories/IT学习/Git/"}]},{"title":"学习用Maven+Tomcat 8 embded构造JavaWeb应用","slug":"IT学习/Java/学习用Maven-Tomcat-8-embded构造JavaWeb应用","date":"2016-10-10T14:44:46.000Z","updated":"2017-01-07T01:13:51.956Z","comments":true,"path":"2016/10/10/IT学习/Java/学习用Maven-Tomcat-8-embded构造JavaWeb应用/","link":"","permalink":"http://tonglei.win/2016/10/10/IT学习/Java/学习用Maven-Tomcat-8-embded构造JavaWeb应用/","excerpt":"","text":"1. 目录结构如下：project -src -main -package -Application.java pom.xml 2. 首先，写好 pom.xml 文件&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;wepass.vip&lt;/groupId&gt; &lt;artifactId&gt;wecard-api-service-java&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;maven.compiler.source&gt;${java.version}&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;${java.version}&lt;/maven.compiler.target&gt; &lt;tomcat.version&gt;8.5.2&lt;/tomcat.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt; &lt;artifactId&gt;tomcat-embed-core&lt;/artifactId&gt; &lt;version&gt;${tomcat.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt; &lt;artifactId&gt;tomcat-embed-logging-juli&lt;/artifactId&gt; &lt;version&gt;${tomcat.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt; &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt; &lt;version&gt;${tomcat.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt; &lt;artifactId&gt;tomcat-jasper&lt;/artifactId&gt; &lt;version&gt;${tomcat.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt; &lt;artifactId&gt;tomcat-jasper-el&lt;/artifactId&gt; &lt;version&gt;${tomcat.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt; &lt;artifactId&gt;tomcat-jsp-api&lt;/artifactId&gt; &lt;version&gt;${tomcat.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 3. 写一个启动方法package samples.j2ee.tomcat8embed; import org.apache.catalina.LifecycleException; import org.apache.catalina.WebResourceRoot; import org.apache.catalina.core.StandardContext; import org.apache.catalina.startup.Tomcat; import org.apache.catalina.webresources.DirResourceSet; import org.apache.catalina.webresources.StandardRoot; import javax.servlet.ServletException; import java.io.File; /** * Created by Booker on 16/10/10. */ public class Application { public static void main(String[] args) throws ServletException, LifecycleException { String webappDirLocation = &quot;src/main/webapp/&quot;; Tomcat tomcat = new Tomcat(); //The port that we should run on can be set into an environment variable //Look for that variable and default to 8080 if it isn&apos;t there. String webPort = System.getenv(&quot;PORT&quot;); if (webPort == null || webPort.isEmpty()) { webPort = &quot;8080&quot;; } tomcat.setPort(Integer.valueOf(webPort)); StandardContext ctx = (StandardContext) tomcat.addWebapp(&quot;/&quot;, new File(webappDirLocation).getAbsolutePath()); System.out.println(&quot;configuring app with basedir: &quot; + new File(&quot;./&quot; + webappDirLocation).getAbsolutePath()); // Declare an alternative location for your &quot;WEB-INF/classes&quot; dir // Servlet 3.0 annotation will work File additionWebInfClasses = new File(&quot;target/classes&quot;); WebResourceRoot resources = new StandardRoot(ctx); resources.addPreResources(new DirResourceSet(resources, &quot;/WEB-INF/classes&quot;, additionWebInfClasses.getAbsolutePath(), &quot;/&quot;)); ctx.setResources(resources); tomcat.start(); tomcat.getServer().await(); } } 4. 编译&gt;运行&gt;测试mvn compile mvn test 访问 http://localhost:8080/ 5. 源码下载https://github.com/tonglei0429/samples/tree/master/j2ee/tomcat-8-embed","categories":[{"name":"IT学习","slug":"IT学习","permalink":"http://tonglei.win/categories/IT学习/"},{"name":"Java","slug":"IT学习/Java","permalink":"http://tonglei.win/categories/IT学习/Java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://tonglei.win/tags/java/"},{"name":"源码","slug":"源码","permalink":"http://tonglei.win/tags/源码/"},{"name":"maven","slug":"maven","permalink":"http://tonglei.win/tags/maven/"},{"name":"tomcat","slug":"tomcat","permalink":"http://tonglei.win/tags/tomcat/"},{"name":"j2ee","slug":"j2ee","permalink":"http://tonglei.win/tags/j2ee/"}],"keywords":[{"name":"IT学习","slug":"IT学习","permalink":"http://tonglei.win/categories/IT学习/"},{"name":"Java","slug":"IT学习/Java","permalink":"http://tonglei.win/categories/IT学习/Java/"}]},{"title":"用元素周期表开篇","slug":"日常记录/用元素周期表开篇","date":"2016-10-08T07:01:54.000Z","updated":"2017-01-07T01:13:51.956Z","comments":true,"path":"2016/10/08/日常记录/用元素周期表开篇/","link":"","permalink":"http://tonglei.win/2016/10/08/日常记录/用元素周期表开篇/","excerpt":"","text":"2015年元素周期表跟当过化学课代表似的 :-)","categories":[{"name":"日常记录","slug":"日常记录","permalink":"http://tonglei.win/categories/日常记录/"}],"tags":[{"name":"日常记录","slug":"日常记录","permalink":"http://tonglei.win/tags/日常记录/"},{"name":"有图","slug":"有图","permalink":"http://tonglei.win/tags/有图/"}],"keywords":[{"name":"日常记录","slug":"日常记录","permalink":"http://tonglei.win/categories/日常记录/"}]}]}